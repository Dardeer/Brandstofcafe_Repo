@page "/"  
@using NHL_Brandstofcafe.Models  
@using NHL_Brandstofcafe.Services  
@using System.Linq  
@inject NHL_Brandstofcafe.Services.IBrandstofcafeDataService DataService  

@* --- HTML/ RAZOR MARKUP --- *@  
<PageTitle>Home</PageTitle>  
<div class="container my-4">
    <h1 class="text-center mb-4">Welkom bij Brandstofcafé</h1>
    <div class="row">
        @*Linker Kolom: Secties & Tafels*@
        <div class="col-md-5">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h2 class="h5 mb-0">Secties</h2>
                </div> @*EINDE CARD-HEADER SECTIES*@ 
                <div class="card-body">
                    @if (_secties == null)
                    {
                        <p><em>Laden van Secties</em></p>
                    }
                    else if (!_secties.Any())
                    {
                        <p>Er zijn momenteel geen secties beschikbaar</p>
                    }
                    else
                    {
                        <ul class="list-group"> 
                            @foreach (var sectie in _secties)
                            {
                                @* C# Ternary operator (inline if-statment) *@  
                                <li class="list-group-item d-flex justify-content-between align-items-center cursor-pointer
                                    @(sectie.Id == _geselecteerdeSectieId ? "active": "")"
                                    @onclick="() => SelecteerSectie(sectie.Id)">
                                    @sectie.Naam
                                    <span class=" badge bg-primary rounded-pill">ID: @sectie.Id</span>
                                </li>
                            }  
                        </ul> 
                    }
                </div> @*EINDE CARD-BODY SECTIE *@
            </div> @*EINDER SECTIES CARD *@

            @*Tafels weergave: Alleen zichtbaar als een sectie is geselecteerd*@
            @if (_geselecteerdeSectieId.HasValue && _tafelsVanGeselecteerdeSectie !=null)
            {
                <div class="card shadow-sm">
                    <div class="card-header bg-secondary text-white">
                        <h2 class="h5 mb-0">Tafels in Sectie: @_geselecteerdeSectieId</h2>
                    </div> @*EINDE CARD-HEADER TAFELS*@
                    <div class="card-body">
                        @if (!_tafelsVanGeselecteerdeSectie.Any())
                        {
                            <p>Er zijn geen tafels gevonden voor deze sectie</p>
                        }
                        else
                        {
                            <ul class="list-group">
                                @foreach (var tafel in _tafelsVanGeselecteerdeSectie)
                                {
                                    <li class=" list-group-item d-flex justify-content-between align-items-center cursor-pointer
                                    @(tafel.ID == _geselecteerdeTafelId ? "active" : " ")"
                                    @onclick="() => SelecteerTafel(tafel.ID)">
                                    Tafel @tafel.TafelNummer
                                        <span class="badge bg-info rounded-pill">@(tafel.IsBezet ? "Bezet" : "Vrij")</span>
                                </li>
                                }
                            </ul>    
                        }
                    </div> @*EINDE CARD-BODY TAFELS*@
                </div> @*EINDE TAFELS CARD*@
            }

            @*___TEST CODE___*@
            @if (_geselecteerdeSectieId.HasValue)
            {
                <p class="mt-3 text-muted small">
                    Geselecteerde Sectie Id: @_geselecteerdeSectieId
                    @if (_geselecteerdeTafelId.HasValue)
                    {
                        <span> | Geselecteerde Tafel Id: @_geselecteerdeTafelId</span>
                    }
                </p>
            }
        </div> @*____EINDE LINKER KOLOM____*@

        @* Rechter Kolom: Categorieën & Producten voor TafelID *@
        <div class="col md-7">
            @* Producten en categorieën alleen zichtbaar als een tafel is geselecteerd *@
            @if (_geselecteerdeTafelId.HasValue)
            {
                <div class="card shadow-sm">
                    <div class="card-header bg-success text-white">
                        <h2 class=" h4 mb-0">Producten voor Tafel @_geselecteerdeTafelId</h2>
                    </div> @*EINDE CARD_HEADER CATEGORIEEN & PRODUCTEN*@
                    <div class="card-body">
                        @if (_categorieen == null)
                        {
                            <p><em>Laden van Categorieën...</em></p>
                        }
                        else if (!_categorieen.Any())
                        {
                            <p>Er zijn momenteel geen productcategorieën beschikbaar.</p>
                        }
                        else
                        {
                            <h3>Kies een Categorie:</h3>
                            var hoofdcategorieen = _categorieen.Where(c => !c.BovenCategorieID.HasValue).OrderBy(c => c.Naam).ToList();
                            @foreach (var hoofdcategorie in hoofdcategorieen)
                            {
                                <h4 class="mt-3 mb-2">@hoofdcategorie.Naam</h4>
                                <ul class="list-group list-group-horizontal flex-wrap mb-3">
                                    @{
                                        var subcategorieen = _categorieen.Where(c => c.BovenCategorieID == hoofdcategorie.ID).OrderBy(c => c.Naam).ToList();
                                    }
                                    @if (!subcategorieen.Any())
                                    {
                                        <li class="list-group-item @(hoofdcategorie.ID == _geselecteerdeCategorieId ? "active" : "") cursor-pointer"
                                            @onclick="() => SelecteerCategorie(hoofdcategorie.ID)">
                                            @hoofdcategorie.Naam (Directe producten)
                                        </li>
                                    }
                                    else
                                    {
                                        @foreach (var subcategorie in subcategorieen)
                                        {
                                            <li class="list-group-item @(subcategorie.ID == _geselecteerdeCategorieId ? "active" : "" ) cursor-pointer"
                                                @onclick="() => SelecteerCategorie(subcategorie.ID)">
                                                @subcategorie.Naam
                                            </li>
                                        }
                                    }
                                </ul>
                            }

                            @*Als een categorie is geselecteerd > Toon Producten*@
                            @if (_geselecteerdeCategorieId.HasValue)
                            {
                                <h3 class="mt-4">Producten in Categorie: @(_categorieen.FirstOrDefault(c => c.ID == _geselecteerdeCategorieId)?.Naam ?? "Onbekend")</h3>
                                @if (_productenVanGeselecteerdeCategorie == null)
                                {
                                    <p><em>Laden van Producten...</em></p>
                                }
                                else if (!_productenVanGeselecteerdeCategorie.Any())
                                {
                                    <p>Geen producten gevonden in deze categorie.</p>
                                }
                                else
                                {
                                    <ul class="list-group">
                                        @foreach (var product in _productenVanGeselecteerdeCategorie)
                                        {
                                            <li class=" list-group-item d-flex justify-content-between align-items-center">
                                                <div class="me-auto">@product.Naam</div>
                                                <span class="badge bg-secondary rounded-pill">€@product.Prijs.ToString("F2")</span>
                                                <button class="btn btn-sm btn-primary m-2" @onclick="() => AddProductToOrder(product)">
                                                    Toevoegen
                                                </button>
                                            </li>
                                        }
                                    </ul>
                                }
                            }

                        }

                    </div> @*EINDE CARD-BODY CATEGORIEEN & PRODUCTEN*@
                </div> @* EINDE CATEGORIEEN & PRODUCTEN CARD *@

                @*  START CARD-ORDERWEERGAVE  Huidige Bestelling Weergave *@
                <div class="card shadow-sm mt-4">
                    @* START CARD-HEADER ORDERWEERGAVE*@
                    <div class="card-header bg-warning text-white"> 
                        <h2 class=" h5 mb-0">Huidige bestelling voor Tafel @_geselecteerdeTafelId</h2>
                    </div> @* EINDE CARD-HEADER ORDERWEERGAVE*@ 
                        @* START CARD-BODY ORDERWEERGAVE*@
                    <div class="card-body">
                        @if (!_actieveTafelOrder.Any())
                        {
                            <p class="text-muted">Nog geen producten toegevoegen aan deze Order</p>
                        }
                        else
                        {
                            <ul class="list-group mb-3">
                                @foreach (var item in _actieveTafelOrder)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div class="me-auto">
                                            @item.ProductName
                                            <span class="badge bg-secondary rounded-pill">x @item.Quantity</span>
                                        </div>
                                        <span>€ @item.TotalItemPrijs.ToString("F2")</span>
                                    </li>
                                }
                            </ul>
                                
                                    //Totaal prijsbestelling berekenen
                                decimal totaalprijsBestelling = _actieveTafelOrder.Sum(item => item.TotalItemPrijs);
                                
                            <h4 class="text-end">Totaal: <span class="badge bg-primary">€ @totaalprijsBestelling.ToString("F2")</span></h4>
                        }
                    </div> @* EIND CARD-BODY ORDERWEERGAVE*@
                </div> @*EINDE CARD-ORDERWEERGAVE*@
            }
        </div> @*EINDE RECHTER KOLOM*@
    </div> @*EINDE ROW*@
</div> @*EINDE CONTAINER*@
@* --- EINDE HTML/ RAZOR MARKUP --- *@  

@code {

    // VARIABELEN VOOR DATA EN STATUS  - - - 
    private List<Sectie>? _secties;  
    private int? _geselecteerdeSectieId; // Houde de ID van de geselecteerde sectie bij  
    private List<Tafel>? _tafelsVanGeselecteerdeSectie; // Houde de Tafels van de Geselecteerde Sectie bij  
    private int? _geselecteerdeTafelId;
    private List<Categorie>? _categorieen; // Lijst van alle Categorieën
    private int? _geselecteerdeCategorieId;
    private List<Product>? _productenVanGeselecteerdeCategorie;

    // Blazor LIFECYCLE METHODE  
    protected override async Task OnInitializedAsync()  
    {  
        _secties = await DataService.GetSectiesAsync();
        _categorieen = await DataService.GetCategorieenAsync(); 
    }  

    // --- EVENT HANELER : KLIK OP SECTIE ---

    private async Task SelecteerSectie(int sectieId)  
    {  
        if (_geselecteerdeSectieId.HasValue && _geselecteerdeSectieId.Value == sectieId)  
        {  
            _geselecteerdeSectieId = null;  
            _tafelsVanGeselecteerdeSectie = null;  
            _geselecteerdeTafelId = null;  // Geselecteerde tafel resetten
            Console.WriteLine($"Sectie ID {sectieId} gedeselecteerd.");  
        }  
        else  
        {  
            _geselecteerdeSectieId = sectieId;  
            Console.WriteLine($"Sectie geselecteerd: ID {sectieId}"); 
            _tafelsVanGeselecteerdeSectie = await DataService.GetTafelsBySectieIdAsync(sectieId);  
            _geselecteerdeTafelId = null;  
        }  
    }  

    private void SelecteerTafel(int tafelId)  
    {  
        if (_geselecteerdeTafelId.HasValue && _geselecteerdeTafelId.Value == tafelId)  
        {  
            // Deselecteer tafel als dezelfde opnieuw wordt aangeklikt
            _geselecteerdeTafelId = null;
            _geselecteerdeCategorieId = null;
            _productenVanGeselecteerdeCategorie = null;
            _actieveTafelOrder = new List<OrderItem>(); // order leeg maken bij deselectie
            Console.WriteLine($"Tafel ID {tafelId} gedeselecteerd.");
        }  
        else  
        {  
            // Selecteer de aangeklikte tafel
            _geselecteerdeTafelId = tafelId;  
            _geselecteerdeCategorieId = null; // Reset geselecteerde categorie
            _productenVanGeselecteerdeCategorie = null; // Reset producten
            Console.WriteLine($"Tafel geselecteerd: ID {tafelId}");  
        }

        if (_huidigeTafelOrders.TryGetValue(_geselecteerdeTafelId!.Value, out var order))
        {
            _actieveTafelOrder = order; // functie: Bestaande orders van deze tafel ophalen
        }
        else
        {
            _actieveTafelOrder = new List<OrderItem>(); // Start met een lege order voor een nieuwe tafel
        }

        StateHasChanged(); // Zorgt dat de UI correct reageert : de UI update na elke selectie, inclusief het bijwerken van de orderweergave.
    }

    private async Task SelecteerCategorie(int categorieId)
    {
        if (_geselecteerdeCategorieId.HasValue && _geselecteerdeCategorieId.Value == categorieId)
        {
            _geselecteerdeCategorieId = null;
            _productenVanGeselecteerdeCategorie = null;
            Console.WriteLine($"Categorie ID {categorieId} geselecteerd");
        }
        else
        {
            _geselecteerdeCategorieId = categorieId;
            Console.WriteLine($"Categorie geselecteerd: ID {categorieId}");
            _productenVanGeselecteerdeCategorie = await DataService.GetProductenByCategorieIdAsync(categorieId);
        }
    }

    // OrderItem Klasse IN DIENST
    public class OrderItem
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; } = String.Empty;
        public decimal ProductPrijs { get; set; }
        public int Quantity { get; set; } // hoeveelheid van het product in de order
        public decimal TotalItemPrijs => Quantity * ProductPrijs;
    }

    // opslag voor bestillingen
    private Dictionary<int, List<OrderItem>> _huidigeTafelOrders = new Dictionary<int, List<OrderItem>>();
    // UI Weergave variabele
    private List<OrderItem> _actieveTafelOrder = new List<OrderItem>();


    @*-- AddProductToOrder Methode Maken *--*@
    private void AddProductToOrder (Product product)
    {
        if (!_geselecteerdeTafelId.HasValue)
        { 
            Console.WriteLine("Geen tafel geselecteerd om product aan toe te voegen.");
            return;
        }
            if (!_huidigeTafelOrders.TryGetValue(_geselecteerdeTafelId!.Value, out var order))
            {
                order = new List<OrderItem>();
                _huidigeTafelOrders[_geselecteerdeTafelId.Value] = order;
            }
            var existingItem = order.FirstOrDefault(item => item.ProductId == product.ID);
            if (existingItem != null)
            {
                existingItem.Quantity++;
                Console.WriteLine($"Hoeveelheid van product '{product.Naam}' verhoogd naar {existingItem.Quantity} voor tafel {_geselecteerdeTafelId.Value}.");
            }
            else
            {
                order.Add(new OrderItem
                {
                    ProductId = product.ID,
                    ProductName = product.Naam,
                    ProductPrijs = product.Prijs,
                    Quantity = 1
                });
                Console.WriteLine($"Product '{product.Naam}' nieuw toegevoegd aan order voor tafel {_geselecteerdeTafelId.Value}.");
            }

            _actieveTafelOrder = order; 
            StateHasChanged();

             Console.WriteLine
             ($"Huidig aantal items in bestelling voor Tafel {_geselecteerdeTafelId.Value}: {_actieveTafelOrder.Count}");
            // 5. Log voor debugging.
            // Console.WriteLine(
            //     $"Product '{product.Naam}' toegevoegd/bijgewerkt voor Tafel {_geselecteerdeTafelId.Value}. " +
            //     $"Nieuwe hoeveelheid: {order.First(item => item.ProductId == product.ID).Quantity}. " +
            //     $"Totaal items in order: {order.Count}");
        
        
    }  


}